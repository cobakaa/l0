// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package db

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4f2ebbc2DecodeWBBackendDb(in *jlexer.Lexer, out *Order) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "order_uid":
			out.OrderUid = string(in.String())
		case "track_number":
			out.TrackNumber = string(in.String())
		case "entry":
			out.Entry = string(in.String())
		case "delivery":
			easyjson4f2ebbc2Decode(in, &out.Delivery)
		case "payment":
			easyjson4f2ebbc2Decode1(in, &out.Payment)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]Item, 0, 0)
					} else {
						out.Items = []Item{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Item
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "locale":
			out.Locale = string(in.String())
		case "internal_signature":
			out.InternalSignature = string(in.String())
		case "customer_id":
			out.CustomerId = string(in.String())
		case "delivery_service":
			out.DeliveryService = string(in.String())
		case "shardkey":
			out.Shardkey = string(in.String())
		case "sm_id":
			out.SmId = int64(in.Int64())
		case "date_created":
			out.DateCreated = string(in.String())
		case "oof_shard":
			out.OofShard = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f2ebbc2EncodeWBBackendDb(out *jwriter.Writer, in Order) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"order_uid\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderUid))
	}
	{
		const prefix string = ",\"track_number\":"
		out.RawString(prefix)
		out.String(string(in.TrackNumber))
	}
	{
		const prefix string = ",\"entry\":"
		out.RawString(prefix)
		out.String(string(in.Entry))
	}
	{
		const prefix string = ",\"delivery\":"
		out.RawString(prefix)
		easyjson4f2ebbc2Encode(out, in.Delivery)
	}
	{
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		easyjson4f2ebbc2Encode1(out, in.Payment)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"locale\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	{
		const prefix string = ",\"internal_signature\":"
		out.RawString(prefix)
		out.String(string(in.InternalSignature))
	}
	{
		const prefix string = ",\"customer_id\":"
		out.RawString(prefix)
		out.String(string(in.CustomerId))
	}
	{
		const prefix string = ",\"delivery_service\":"
		out.RawString(prefix)
		out.String(string(in.DeliveryService))
	}
	{
		const prefix string = ",\"shardkey\":"
		out.RawString(prefix)
		out.String(string(in.Shardkey))
	}
	{
		const prefix string = ",\"sm_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.SmId))
	}
	{
		const prefix string = ",\"date_created\":"
		out.RawString(prefix)
		out.String(string(in.DateCreated))
	}
	{
		const prefix string = ",\"oof_shard\":"
		out.RawString(prefix)
		out.String(string(in.OofShard))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Order) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4f2ebbc2EncodeWBBackendDb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Order) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4f2ebbc2EncodeWBBackendDb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Order) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4f2ebbc2DecodeWBBackendDb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Order) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4f2ebbc2DecodeWBBackendDb(l, v)
}
func easyjson4f2ebbc2Decode1(in *jlexer.Lexer, out *struct {
	Transaction  string `json:"transaction"`
	RequestId    string `json:"request_id"`
	Currency     string `json:"currency"`
	Provider     string `json:"provider"`
	Amount       int64  `json:"amount"`
	PaymentDt    int64  `json:"payment_dt"`
	Bank         string `json:"bank"`
	DeliveryCost int64  `json:"delivery_cost"`
	GoodsTotal   int64  `json:"goods_total"`
	CustomFee    int64  `json:"custom_fee"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction":
			out.Transaction = string(in.String())
		case "request_id":
			out.RequestId = string(in.String())
		case "currency":
			out.Currency = string(in.String())
		case "provider":
			out.Provider = string(in.String())
		case "amount":
			out.Amount = int64(in.Int64())
		case "payment_dt":
			out.PaymentDt = int64(in.Int64())
		case "bank":
			out.Bank = string(in.String())
		case "delivery_cost":
			out.DeliveryCost = int64(in.Int64())
		case "goods_total":
			out.GoodsTotal = int64(in.Int64())
		case "custom_fee":
			out.CustomFee = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f2ebbc2Encode1(out *jwriter.Writer, in struct {
	Transaction  string `json:"transaction"`
	RequestId    string `json:"request_id"`
	Currency     string `json:"currency"`
	Provider     string `json:"provider"`
	Amount       int64  `json:"amount"`
	PaymentDt    int64  `json:"payment_dt"`
	Bank         string `json:"bank"`
	DeliveryCost int64  `json:"delivery_cost"`
	GoodsTotal   int64  `json:"goods_total"`
	CustomFee    int64  `json:"custom_fee"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction\":"
		out.RawString(prefix[1:])
		out.String(string(in.Transaction))
	}
	{
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestId))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int64(int64(in.Amount))
	}
	{
		const prefix string = ",\"payment_dt\":"
		out.RawString(prefix)
		out.Int64(int64(in.PaymentDt))
	}
	{
		const prefix string = ",\"bank\":"
		out.RawString(prefix)
		out.String(string(in.Bank))
	}
	{
		const prefix string = ",\"delivery_cost\":"
		out.RawString(prefix)
		out.Int64(int64(in.DeliveryCost))
	}
	{
		const prefix string = ",\"goods_total\":"
		out.RawString(prefix)
		out.Int64(int64(in.GoodsTotal))
	}
	{
		const prefix string = ",\"custom_fee\":"
		out.RawString(prefix)
		out.Int64(int64(in.CustomFee))
	}
	out.RawByte('}')
}
func easyjson4f2ebbc2Decode(in *jlexer.Lexer, out *struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Zip     string `json:"zip"`
	City    string `json:"city"`
	Address string `json:"address"`
	Region  string `json:"region"`
	Email   string `json:"email"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "city":
			out.City = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f2ebbc2Encode(out *jwriter.Writer, in struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Zip     string `json:"zip"`
	City    string `json:"city"`
	Address string `json:"address"`
	Region  string `json:"region"`
	Email   string `json:"email"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"zip\":"
		out.RawString(prefix)
		out.String(string(in.Zip))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjson4f2ebbc2DecodeWBBackendDb1(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chrt_id":
			out.ChrtId = int64(in.Int64())
		case "track_number":
			out.TrackNumber = string(in.String())
		case "price":
			out.Price = int64(in.Int64())
		case "rid":
			out.Rid = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "sale":
			out.Sale = int64(in.Int64())
		case "size":
			out.Size = string(in.String())
		case "total_price":
			out.TotalPrice = int64(in.Int64())
		case "nm_id":
			out.NmId = int64(in.Int64())
		case "brand":
			out.Brand = string(in.String())
		case "status":
			out.Status = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4f2ebbc2EncodeWBBackendDb1(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chrt_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ChrtId))
	}
	{
		const prefix string = ",\"track_number\":"
		out.RawString(prefix)
		out.String(string(in.TrackNumber))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Int64(int64(in.Price))
	}
	{
		const prefix string = ",\"rid\":"
		out.RawString(prefix)
		out.String(string(in.Rid))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"sale\":"
		out.RawString(prefix)
		out.Int64(int64(in.Sale))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.String(string(in.Size))
	}
	{
		const prefix string = ",\"total_price\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalPrice))
	}
	{
		const prefix string = ",\"nm_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.NmId))
	}
	{
		const prefix string = ",\"brand\":"
		out.RawString(prefix)
		out.String(string(in.Brand))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Int64(int64(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Item) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4f2ebbc2EncodeWBBackendDb1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Item) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4f2ebbc2EncodeWBBackendDb1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Item) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4f2ebbc2DecodeWBBackendDb1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Item) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4f2ebbc2DecodeWBBackendDb1(l, v)
}
